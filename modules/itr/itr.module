<?php

  use Drupal\taxonomy\Entity\Term;
  use Drupal\user\Entity\User;
  use Drupal\Core\Form\FormStateInterface;
  use Drupal\Core\Ajax\AjaxResponse;
  use Drupal\Core\Ajax\ReplaceCommand;
  use Drupal\Core\Ajax\HtmlCommand;
  use Drupal\Core\Ajax\InsertCommand;

  use Drupal\itr\Ajax\DemoTestJsCommand;

  // for views alter
  use Drupal\views\ViewExecutable;
  use Drupal\views\Plugin\views\query\QueryPluginBase;

  use Drupal\itr\Utility\Utility;

  require_once('modules/devel/kint/kint/Kint.class.php');
  // Kint::$maxLevels = 4;


  /*
  * get categories for a specific department for the current user
  */
  function getCategoriesForUser() {
    $user = User::load(\Drupal::currentUser()->id());
    $depts = $user->get('field_department')->getValue();

    $deptCount = count($depts);
    $vid = Term::load($depts[0]['target_id'])->getVocabularyId();

    echo 'form_id: ' . $form_id . '<br/>';
    echo 'depts count: ' . count($depts) . '<br/>';
    echo 'vocab id: ' . $vid;

    $categories = array();
    $terms = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadTree($vid);
    $categoryData['_none'] = '- None - ';
    for($i = 0; $i < $deptCount; $i++) {
      $tid = $depts[$i]['target_id'];
      $parentTerm = Term::load($tid)->getName();

      foreach($terms as $term) {
        if($term->parents[0] == $tid) {
          print_r($terms->$children, 1);
          // $categoryData[] = array(
          //   'id' => $term->tid,
          //   'name' => $term->name,
          // );

          $categoryTermId = $term->tid;
          $categoryChildren = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadTree($vid, $categoryTermId);
          if($deptCount > 1) {
            $categoryData[$tid] = 'Categories for ' . $parentTerm;
          }
          foreach($categoryChildren as $categoryChildTerm) {
            $indicator = $deptCount > 1 ? '-' : '';
            $categoryData[$categoryChildTerm->tid] = $indicator . $categoryChildTerm->name;
          }
        }
      }
    }

    // $categoryChildren = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadTree($vid, 13);

    error_log(print_r($categoryData,1));

    // error_log(print_r($categoryChildren,1));

    
    // error_log(print_r($terms, 1));
    // foreach($terms as $term) {
    //   $term_data[] = array(
    //     'id' => $term->tid,
    //     'name' => $term->name,
    //     'parent_id' => $term->parents[0],
    //   );
    // }

    // error_log(print_r($term_data, 1));

    // $term = Term::load($depts[0]['target_id']);
    // $name = $term->getName();

    // error_log(print_r($depts,1));

    return $categoryData;
  }

  function selectDepartmentForUser() {
    $user = User::load(\Drupal::currentUser()->id());
    $depts = $user->get('field_department')->getValue();
    return $depts[0]['target_id'];
  }

  // get top level department terms from department vocab
  function getDepartments() {
    $vid = 'department';
    $depts = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadTree($vid, 0, 1);
    foreach($depts as $key => $row) {
      $id[$key] = $row->id;
      $name[$key] = $row->name;
    }
    array_multisort($name, SORT_ASC, $depts);
    return $depts;
  }

  function getTermId(string $idStr, $parentId = 0) {
    // error_log('get term id for [' . $idStr . '] with parentId: [' . $parentId . ']');
    $vid = 'department';
    $terms = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadTree($vid, $parentId);
    $tid = -1;
    // error_log($parentId);
    foreach($terms as $term) {
      // error_log(strtolower($term->name) . '==?' . $idStr);
      if(strtolower($term->name) == strtolower($idStr)) {
        $tid = $term->tid;
        break;
      }
    }
    return $tid;
  }

  // check if the current user has a specific dept id
  function userHasDept($deptId) {
    $user = User::load(\Drupal::currentUser()->id());
    $userDepts = Utility::getDepartmentsForUser();
    $c = count($userDepts);
    // error_log(print_r($userDepts, 1));
    for($i=0; $i<$c; $i++) {
      if($userDepts[$i]['id'] == $deptId)
        return true;
    }
    return false;
  }

  // check if the current user has the admin role
  function userIsAdmin() {
    $user = User::load(\Drupal::currentUser()->id());
    return in_array('administrator', $user->getRoles());
  }

  // alter add record form
  function itr_form_node_record_form_alter(&$form, FormStateInterface $form_state, $form_id) {
    error_log('itr.module: itr_form_node_record_form_alter: $form_id: ' . $form_id);
    // Kint::dump($form);

    // error_log(print_r(getDepartmentCategories('25'), 1));


    $depts = Utility::getDepartmentsForUser();
    // error_log(print_r($depts, 1));
    // $deptId = selectDepartmentForUser();
    // error_log('deptId: ' . $deptId);
    // error_log(print_r($form['field_category'], 1));
    // error_log(print_r($form['field_department']['widget'], 1));
    // $form['field_department']['widget']['#default_value'] = $deptId;
    // $form['field_category']['widget']['#options'] = getCategoriesForUser();
    // $form['field_category']['widget']['#options'] = array();
    // error_log(print_r($form['field_category']['widget']['#options'], 1));

    // $form['field_category']['#validated'] = TRUE;
    // $form_state->setRebuild(TRUE);

    // error_log(print_r($form['field_category']['widget']['#options'], 1));

    $deptOptions = array();
    $deptOptions['_none'] = '- None -';
    foreach($depts as $dept) {
      $deptOptions[$dept['id']] = $dept['name'];
    }

    // error_log(print_r($deptOptions, 1));

    // $form['field_category']['widget']['#options'] = $deptOptions;

    $form['field_department']['widget']['#options'] = $deptOptions;
    $form['#attached']['library'][] = 'itr/add-record';
    $form['#attached']['drupalSettings']['itr']['addRecord']['foo'] = 'bar';
    $form['#attached']['drupalSettings']['itr']['path'] = base_path();

    // attach ajax behavior to department drop down
    $form['field_department']['widget']['#ajax'] = array(
      'callback' => 'itrDepartmentChangeAjax',
      'event' => 'change',
      'progress' => array(
        'type' => 'throbber',
        'message' => NULL,
      ),
    );

    foreach(array_keys($form['actions']) as $action) {
      if($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type']==='submit') {
        $form['actions'][$action]['#submit'][] = '_itr_form_redirect_callback';
      }  
    }
  }

  function _itrDepartmentChangeAjax(array $form, FormStateInterface $form_state) {
    return $form['field_department'];
  }

  // alter edit record form
  function itr_form_node_record_edit_form_alter(&$form, FormStateInterface $form_state, $form_id) {
    $form['#attached']['library'][] = 'itr/add-record';
    $form['#attached']['drupalSettings']['itr']['addRecord']['foo'] = 'bar';
    $deptId = $form['field_department']['widget']['#default_value'][0];

    $terms = Utility::getDepartmentCategories($deptId);
    foreach($terms as $term) {
      $newOptions[$term['id']] = $term['name'];
    }
    // replace the existing options with the current record's department's options (defined in taxonomy)
    $form['field_category']['widget']['#options'] = $newOptions;


    $divisions = Utility::getDepartmentDivisions($deptId);
    foreach($divisions as $division) {
      $divisionOptions[$division['id']] = $division['name'];
    }

    $form['field_division']['widget']['#options'] = $divisionOptions;

    // disable to the department
    $form['field_department']['widget']['#attributes']['disabled'] = 'disabled';

    // error_log(print_r($form['field_department'], 1));
    // error_log($deptId);

    // $form['field_department']['widget']['#ajax'] = array(
    //   'callback' => 'itrDepartmentChangeAjax',
    //   'event' => 'change',
    //   'progress' => array(
    //     'type' => 'throbber',
    //     'message' => NULL,
    //   ),
    // );
    // Kint::dump($form);
    
  }

  // ajax callback when department is changed to update category and division options
  function itrDepartmentChangeAjax(array &$form, FormStateInterface $form_state) {
    // error_log(print_r($form['field_department'], 1));
    $deptId = $form['field_department']['widget']['#value'];

    $categories = Utility::getDepartmentCategories($deptId);
    $categoryOptionHtml = '<option value="_none">- None -</option>';
    foreach($categories as $category) {
      $categoryOptionHtml .= '<option value="' . $category['id'] . '">' . $category['name'] . '</option>';
    }

    $divisions = Utility::getDepartmentDivisions($deptId);
    $divisionOptionHtml = '<option value="_none">- None -</option>';
    foreach($divisions as $division) {
      $divisionOptionHtml .= '<option value="' . $division['id'] . '">' . $division['name'] . '</option>';
    }

    $response = new AjaxResponse();
    $response->addCommand(new HtmlCommand('#edit-field-category', $categoryOptionHtml));
    $response->addCommand(new HtmlCommand('#edit-field-division', $divisionOptionHtml));
    $response->addCommand(new DemoTestJsCommand());
    return $response;
  }

  // function itr_page_attachments_alter(&$build) {
  //   $build['#attached']['library'][] = 'itr/add-record';
  //   $build['#attached']['drupalSettings']['itr']['addRecord']['foo'] = 'bar';
  // }

  // increase the length of the site slogan
  function itr_form_system_site_information_settings_alter(&$form, FormStateInterface $form_state, $form_id) {
    $form['site_information']['site_slogan']['#maxlength'] = 500;
  }

  // alter the view for admin vs. non-admin
  // function itr_views_query_alter(ViewExecutable $view, QueryPluginBase $query) {
  //   $user = User::load(\Drupal::currentUser()->id());
  //   $viewId = $view->id();
  //   error_log('view alter');
  //   error_log($viewId);
  //   error_log(print_r($user->getRoles(), 1));
  //   $isAdmin = in_array('administrator', $user->getRoles());
  //   // error_log(print_r($query, 1));
  //   if($viewId == 'content') {
  //     error_log('this is the content view');
  //     if(!$isAdmin) {
  //       error_log('this is not an admin');
  //       //INNER JOIN {users} users_field_data_node_field_data__users ON users_field_data_node_field_data.uid = users_field_data_node_field_data__users.uid
  //       $configuration = [
  //         'type' => 'INNER',
  //         'table' => 'users',
  //         'field' => 'uid',
  //         'left_table' => 'users_field_data',
  //         'left_field' => 'uid',
  //         'operator' => '=',
  //       ];
  //       $join = \Drupal::service('plugin.manager.views.join')->createInstance('standard', $configuration);
  //       // $query->addRelationship()
  //     } else {
  //       error_log('this is an admin');
  //     }
  //   }
  // }

  // redirect user to content edit view part 1
  function itr_form_user_login_form_alter(&$form, FormStateInterface $form_state, $form_id) {
    error_log('form_id: ' . $form_id);
    if($form_id == 'user_login_form') {
      error_log('this is the login form blah');
      $form['#submit'][] = '_itr_form_redirect_callback';
    }
  }

  // redirect user to content edit view part 2
  // also used after adding a record
  function _itr_form_redirect_callback($form, FormStateInterface $form_state) {
    $user = User::load(\Drupal::currentUser()->id());
    $userDepts = Utility::getDepartmentsForUser();
    // error_log(print_r($userDepts, 1));
    $formId = $form['#form_id'];
    
    error_log('itr.module: _itr_form_redirect_callback: $formId: ' . $formId);

    if($formId == 'node_record_form') {
      if(isset($form['field_department'])) {
        $deptId = $form['field_department']['widget']['#value'];
        error_log('itr.module: _itr_form_redirect_callback: $deptId: ' . $deptId);
        $form_state->setRedirect('view.schedules.page_1', [
          'dept_id' => $deptId
        ]);
      }
    } else if($formId == 'user_login_form') {
      $isAdmin = in_array('administrator', $user->getRoles());
      if(!$isAdmin) {
        $form_state->setRedirect('view.schedules.page_1', [
          'dept_id' => $userDepts[0]['id']
        ]); // this route defined in itr.routing.yml
      } else {
        // $form_state->setRedirect('admin.content'); // this route defined in itr.routing.yml
        $form_state->setRedirect('view.schedules.page_1', [
          'dept_id' => 'all'
        ]); // this route defined in itr.routing.yml
      }
    }
  }

  // alter user (non-admin) view form
  function itr_form_views_form_content_page_user_view_alter(&$form, FormStateInterface $form_state, $form_id) {
    if($form_id == 'views_form_content_page_user_view') {
      error_log($form_id);
      error_log('this is the views_form_content_page_user_view_alter form hook');
      // Kint::dump($form);
      // error_log(print_r($form['header']['node_bulk_form']['action']['#options'], 1));
      $theOptions = $form['header']['node_bulk_form']['action']['#options'];
      foreach($theOptions as $key => $value) {
        if($key == 'node_delete_action') {
          $newOptions[$key] = $value;
        }
      }
      $form['header']['node_bulk_form']['action']['#options'] = $newOptions;
    }
  }

  // alter the form for the views exposed filters
  function itr_form_views_exposed_form_alter(&$form, FormStateInterface $form_state, $form_id) {
    // alter the form for the unpublished schedule view filter
    if($form['#id'] == 'views-exposed-form-schedules-page-1') {
      $requestDeptId = \Drupal::routeMatch()->getParameter('dept_id'); // the requested dept_id from the route
      // if the requested deptId (a contextual filter defined in drupal ui view "schedules") is a dept belonging to this user
      // or the user is admin, display this view and alter the filter options to only show the user's departments (done through user settings via drupal ui)
      if(userHasDept($requestDeptId) || userIsAdmin()) {
        $currentOptions = $form['field_department_target_id']['#options']; // get current options
        $newOptions = array(
          'All' => $currentOptions['All']
        ); // grab All key from current options and assign to new options
        $depts = Utility::getDepartmentsForUser(); // get departments only (no child terms)
        // error_log(print_r($depts, 1));
        $deptCount = count($depts);
        for($i=0; $i<$deptCount; $i++) { // loop through depts and create new stdClass object for use in new options
          $obj = new stdClass();
          $obj->option = array(
            $depts[$i]['id'] => $depts[$i]['name']
          );
          $newOptions[] = $obj; // append
        }
        $form['field_department_target_id']['#options'] = $newOptions; // set new options
        $firstKey = current(array_keys($newOptions[0]->option));
        $form['field_department_target_id']['#default_value'] = '10';
      } else { // requested dept does not belong to this user, throw access denied exception
        throw new \Symfony\Component\HttpKernel\Exception\AccessDeniedHttpException();
      }
      // Kint::dump($form);
    } 
  }

  // do some stuff with views before render
  function itr_views_pre_render(\Drupal\views\ViewExecutable $view) {
    // error_log($view->id());
    // Kint::dump($view->field['node_bulk_form']);
    // Kint::dump($view);
    // error_log(print_r($view->field['node_bulk_form']->options['selected_actions'], 1));
    $viewId = $view->id();

    if($viewId == 'schedules') { // the schedules view
      if(!userIsAdmin()) { // if user is not admin, only allow delete action
        $view->field['node_bulk_form']->options['selected_actions'] = ['node_delete_action'];
      }
    }
  }

  function itr_link_alter(&$variables) {

    // Kint::dump($variables);
    // error_log(print_r($variables, 1));
    $url = $variables['url'];
    if($url->isRouted() && $url->getRouteName() == 'view.schedules.page_1') {
      // $menuTree = \Drupal::menuTree()->load('account', new \Drupal\Core\Menu\MenuTreeParameters());
      // foreach($menuTree as $item) {
      //   error_log($item->link->getTitle());
      //   if($item->hasChildren) {
      //     $subtree = $item->subtree;
      //     foreach($subtree as $subtreeItem) {
      //       error_log('-' . $subtreeItem->link->getTitle());
      //     }
      //   }
      // }
      if(!userIsAdmin()) {
        $depts = Utility::getDepartmentsForUser();
        if(count($depts) > 0) {
          $url->setRouteParameter('dept_id', $depts[0]['id']);
        }  
      }
      
      // Kint::dump($variables);
    }
  }

?>