<?php

  use Drupal\taxonomy\Entity\Term;
  use Drupal\user\Entity\User;
  use Drupal\Core\Entity\EntityInterface;
  use Drupal\Core\Form\FormStateInterface;
  use Drupal\Core\Ajax\AjaxResponse;
  use Drupal\Core\Ajax\ReplaceCommand;
  use Drupal\Core\Ajax\HtmlCommand;
  use Drupal\Core\Ajax\InsertCommand;

  // for views alter
  use Drupal\views\ViewExecutable;
  use Drupal\views\Plugin\views\query\QueryPluginBase;

  use Drupal\itr\Utility\Utility;

  use Drupal\Core\Url;
  use Drupal\node\NodeInterface;
  use \Drupal\Core\Session\AccountInterface;
  use Drupal\Core\Access\AccessResult;
  use Symfony\Component\HttpFoundation\RedirectResponse;

  function selectDepartmentForUser() {
    $user = User::load(\Drupal::currentUser()->id());
    $depts = $user->get('field_department')->getValue();
    return $depts[0]['target_id'];
  }

  // get top level department terms from department vocab
  function getDepartments() {
    $vid = 'department';
    $depts = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadTree($vid, 0, 1);
    foreach($depts as $key => $row) {
      $id[$key] = $row->id;
      $name[$key] = $row->name;
    }
    array_multisort($name, SORT_ASC, $depts);
    return $depts;
  }

  function getTermId(string $idStr, $parentId = 0) {
    $vid = 'department';
    $terms = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadTree($vid, $parentId);
    $tid = -1;
    foreach($terms as $term) {
      if(strtolower($term->name) == strtolower($idStr)) {
        $tid = $term->tid;
        break;
      }
    }
    return $tid;
  }

  // check if the current user has a specific dept id
  function userHasDept($deptId) {
    $user = User::load(\Drupal::currentUser()->id());
    $userDepts = Utility::getDepartmentsForUser();
    $c = count($userDepts);
    for($i=0; $i<$c; $i++) {
      if($userDepts[$i]['id'] == $deptId)
        return true;
    }
    return false;
  }

  // alter add record form
  function itr_form_node_record_form_alter(&$form, FormStateInterface $form_state, $form_id) {
    $form['#attributes']['class'][] = 'itr-form';
    $depts = Utility::getDepartmentsForUser();

    $deptOptions = array();
    $deptOptions['_none'] = '- None -';
    foreach($depts as $dept) {
      $deptOptions[$dept['id']] = $dept['name'];
    }
    $form['field_department']['widget']['#options'] = $deptOptions;
    $form['#attached']['library'][] = 'itr/add-record';
    $form['#attached']['drupalSettings']['itr']['addRecord']['foo'] = 'bar';
    $form['#attached']['drupalSettings']['itr']['path'] = base_path();

    // attach ajax behavior to department drop down
    $form['field_department']['widget']['#ajax'] = array(
      'callback' => 'itrDepartmentChangeAjax',
      'event' => 'change',
      'progress' => array(
        'type' => 'throbber',
        'message' => NULL,
      ),
    );

    $form['actions']['submit']['#attributes']['class'][] = 'blue-btn btn-lg';

    foreach(array_keys($form['actions']) as $action) {
      if($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type']==='submit') {
        $form['actions'][$action]['#submit'][] = '_itr_form_redirect_callback';
      }  
    }
  }

  // function _itrDepartmentChangeAjax(array $form, FormStateInterface $form_state) {
  //   return $form['field_department'];
  // }

  // alter edit record form
  function itr_form_node_record_edit_form_alter(&$form, FormStateInterface $form_state, $form_id) {
    $form['#attributes']['class'][] = 'node-record-form';
    $form['#attributes']['class'][] = 'itr-form';
    $form['#attached']['library'][] = 'itr/add-record';
    $form['#attached']['drupalSettings']['itr']['addRecord']['foo'] = 'bar';
    $deptId = $form['field_department']['widget']['#default_value'][0];

    $terms = Utility::getDepartmentCategories($deptId);
    foreach($terms as $term) {
      $newOptions[$term['id']] = $term['name'];
    }
    // replace the existing options with the current record's department's options (defined in taxonomy)
    $form['field_category']['widget']['#options'] = $newOptions;


    $divisions = Utility::getDepartmentDivisions($deptId);
    foreach($divisions as $division) {
      $divisionOptions[$division['id']] = $division['name'];
    }

    if(!empty($divisionOptions)) {
      $form['field_division']['widget']['#options'] = $divisionOptions;
    }

    // disable to the department
    $form['field_department']['widget']['#attributes']['disabled'] = 'disabled';
    $form['actions']['submit']['#attributes']['class'][] = 'blue-btn btn-lg';
    
  }

  // ajax callback when department is changed to update category and division options
  function itrDepartmentChangeAjax(array &$form, FormStateInterface $form_state) {
    $deptId = $form['field_department']['widget']['#value'];

    $categories = Utility::getDepartmentCategories($deptId);
    $categoryOptionHtml = '<option value="_none">- None -</option>';
    foreach($categories as $category) {
      $categoryOptionHtml .= '<option value="' . $category['id'] . '">' . $category['name'] . '</option>';
    }

    $divisions = Utility::getDepartmentDivisions($deptId);
    $divisionOptionHtml = '<option value="_none">- None -</option>';
    foreach($divisions as $division) {
      $divisionOptionHtml .= '<option value="' . $division['id'] . '">' . $division['name'] . '</option>';
    }

    $response = new AjaxResponse();
    $response->addCommand(new HtmlCommand('#edit-field-category', $categoryOptionHtml));
    $response->addCommand(new HtmlCommand('#edit-field-division', $divisionOptionHtml));
    return $response;
  }

  // increase the length of the site slogan
  function itr_form_system_site_information_settings_alter(&$form, FormStateInterface $form_state, $form_id) {
    $form['site_information']['site_slogan']['#maxlength'] = 500;
  }

  // redirect user to content edit view part 1
  function itr_form_user_login_form_alter(&$form, FormStateInterface $form_state, $form_id) {
    if($form_id == 'user_login_form') {
      $form['#submit'][] = '_itr_form_redirect_callback';
    }
  }

  // redirect user to content edit view part 2
  // also used after adding a record
  function _itr_form_redirect_callback($form, FormStateInterface $form_state) {
    $user = User::load(\Drupal::currentUser()->id());
    $userDepts = Utility::getDepartmentsForUser();
    $formId = $form['#form_id'];
    
    if($formId == 'node_record_form') {
      if(isset($form['field_department'])) {
        $deptId = $form['field_department']['widget']['#value'];
        $form_state->setRedirect('view.schedules.page_1', [
          'dept_id' => $deptId
        ]);
      }
    } else if($formId == 'user_login_form') {
      $isAdmin = in_array('administrator', $user->getRoles());
      if(!empty($userDepts)) {
        $form_state->setRedirect('view.schedules.page_1', [
          'dept_id' => $userDepts[0]['id']
        ]); // this is a view route defined by drupal, view --> schedules --> page_1
      } 
      else {
        $form_state->setRedirect('user.page'); // this route defined in itr.routing.yml
      }
    }
  }

  // alter user (non-admin) view form
  function itr_form_views_form_content_page_user_view_alter(&$form, FormStateInterface $form_state, $form_id) {
    if($form_id == 'views_form_content_page_user_view') {
      $theOptions = $form['header']['node_bulk_form']['action']['#options'];
      foreach($theOptions as $key => $value) {
        if($key == 'node_delete_action') {
          $newOptions[$key] = $value;
        }
      }
      $form['header']['node_bulk_form']['action']['#options'] = $newOptions;
    }
  }

  // alter the form for the views exposed filters
  function itr_form_views_exposed_form_alter(&$form, FormStateInterface $form_state, $form_id) {
    // alter the form for the unpublished schedule view filter
    if($form['#id'] == 'views-exposed-form-schedules-page-1' || $form['#id'] == 'views-exposed-form-schedules-page-2') {
      $form['#attached']['library'][] = 'itr/view-edit-schedule';
      $user = \Drupal\user\Entity\User::load(\Drupal::currentUser()->id());
      $requestDeptId = \Drupal::routeMatch()->getParameter('dept_id'); // the requested dept_id from the route

      $view = $form_state->get('view');
      $deptId = count($view->getExposedInput()) > 0 ? $view->getExposedInput()['field_department_target_id'] : $view->args[0]; // this contextual filter could be coming from two different places

      $form['#attached']['drupalSettings']['itr']['schedule']['deptId'] = $deptId;
      $form['#attached']['drupalSettings']['itr']['user']['admin'] = Utility::userIsAdmin();

      if(userHasDept($deptId) || Utility::userIsAdmin()) {
        $currentOptions = $form['field_department_target_id']['#options']; // get current options
        $newOptions = array(
          'All' => $currentOptions['All']
        ); // grab All key from current options and assign to new options
        $depts = Utility::getDepartmentsForUser(); // get departments only (no child terms)
        $deptCount = count($depts);
        for($i=0; $i<$deptCount; $i++) { // loop through depts and create new stdClass object for use in new options
          $obj = new stdClass();
          $obj->option = array(
            $depts[$i]['id'] => $depts[$i]['name']
          );
          $newOptions[] = $obj; // append
        }
        $form['field_department_target_id']['#options'] = $newOptions; // set new options
      } else { // requested dept does not belong to this user, throw access denied exception
        throw new \Symfony\Component\HttpKernel\Exception\AccessDeniedHttpException();
      }
    } 
  }

  function itr_node_access(NodeInterface $node, $op, AccountInterface $account) {
    $content_type = $node->bundle();
    if($content_type == 'record') {
      if(!Utility::userIsAdmin() && $node->isPublished()) { // non admin users cannot mess with published records
        if($op == 'delete' || $op == 'update') {
          return AccessResult::forbidden('A published record may not be modified');
        }
      }
    }
  }

  // do some stuff with views before render
  function itr_views_pre_render(\Drupal\views\ViewExecutable $view) {
    $viewId = $view->id();
    if($viewId == 'schedules') { // the schedules view
      if(!Utility::userIsAdmin()) { // if user is not admin, only allow delete action
        if($view->field['node_bulk_form']) {
          $view->field['node_bulk_form']->options['selected_actions'] = ['node_delete_action'];
        }
      }
    }
  }

  function itr_link_alter(&$variables) {
    $url = $variables['url'];
    if($url->isRouted() && ($url->getRouteName() == 'view.schedules.page_1' || $url->getRouteName() == 'view.schedules.page_2')) {
      $depts = Utility::getDepartmentsForUser();
      if(count($depts) > 0) {
        $url->setRouteParameter('dept_id', $depts[0]['id']);
      }  
    }
  }

  function itr_form_node_record_template_form_alter(&$form, FormStateInterface $form_state, $form_id) {
    $form['#attached']['library'][] = 'itr/add-record-template';
  }

  // department information form
  function itr_form_node_department_information_form_alter(&$form, FormStateInterface $form_state, $form_id) {
    departmentInformationFormAlter($form, $form_state, $form_id);
  }

  function itr_form_node_department_information_edit_form_alter(&$form, FormStateInterface $form_state, $form_id) {
    departmentInformationFormAlter($form, $form_state, $form_id);
  }

  function itr_entity_insert(EntityInterface $entity) {
    if ($entity instanceof \Drupal\node\NodeInterface){
      if($entity->bundle() == 'department_information') {
        $id = $entity->id();
        $url = Url::fromRoute('entity.node.edit_form', ['node' => $id])->toString();
        // Redirecting to edit after department information created
        $response = new RedirectResponse($url);
        $response->send();
      }
    }
  }

  function departmentInformationFormAlter(&$form, FormStateInterface $form_state, $form_id) {
    $form['#attributes']['class'][] = 'itr-form';
    $depts = Utility::getDepartmentsForUser();
    $deptOptions = array();
    $deptOptions['_none'] = '- None -';
    foreach($depts as $dept) {
      $deptOptions[$dept['id']] = $dept['name'];
    }
    $keys = array_keys($deptOptions);
    if(!empty($keys[1])) {
      $key = $keys[1];
      $form['field_department_name']['widget']['#default_value'] = $key;
    }
    $form['field_department_name']['widget']['#options'] = $deptOptions;
    $form['#attached']['library'][] = 'itr/dept-info-form';
    $form['actions']['submit']['#attributes']['class'][] = 'blue-btn btn-lg';

    if(!Utility::userIsAdmin()) { // user is not admin, disable select
      $form['field_schedule_ratified_date']['widget'][0]['value']['#attributes']['readonly'] = TRUE;
    }

    foreach(array_keys($form['actions']) as $action) {
      if($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type']==='submit') {
        $form['actions'][$action]['#submit'][] = '_itr_form_manage_dept_callback';
      }  
    }
  }

  function _itr_form_manage_dept_callback($form, FormStateInterface $form_state) {
    $node = \Drupal::routeMatch()->getParameter('node');
    if ($node instanceof \Drupal\node\NodeInterface) {
      // You can get nid and anything else you need from the node object.
      $nid = $node->id();
      $routeName = 'entity.node.edit_form';
      $routeParameters = ['node'=>$nid];
      $form_state->setRedirect($routeName, $routeParameters);
    }
  }